option, -echo, -warn;
! see https://github.com/fsoubelet/MADX_scripts
!system, "ln -nfs ~/cernbox/OMC/MADX_scripts/Local_Coupling scripts";  ! for local
system, "ln -nfs /afs/cern.ch/work/f/fesoubel/MADX_scripts/Local_Coupling scripts";  ! for afs / htcondor

!#############################################################################
!############################## Tune and chroma ##############################
!#############################################################################

! Tune definitions used in some of the later macros
qx0 = 62.31;
qy0 = 60.32;
tsplit = 2.0;
qx00 = 62.0;
qy00 = 60.0;
qprime = 2.0;

qxinit = qx0;
qyinit = qy0;
qxfinal = 62.31; ! Define initial qxinit / qyinit with larger separation for robustness to large coupling errors as sources are introduced (want to avoid getting stuck on the wrong side of qx=qy)
qyfinal = 60.32; ! Then rematch to desired final tunes at the very end of the script. qx0 etc are kept with the init values for coupling routines etc.

ptcqxinit = qxinit - qx00;
ptcqyinit = qyinit - qy00;
qxinitint = qxinit - ptcqxinit;
qyinitint = qyinit - ptcqyinit;

dqxinit = qprime;
dqyinit = qprime;
dqxfinal = qprime;
dqyfinal = qprime;

vrf400 = 6;  ! Getting RF powering for sixtracklib tracking later on
lagrf400.b1 = 0.5;  ! Cavity phase difference in units of 2pi
lagrf400.b2 = 0;

!#############################################################################
!############################# Setting Up Lattice ############################
!#############################################################################

call, file="scripts/lhc_as-built.seq";
slicefactor = 8;
beam;

call, file="scripts/myslice.madx";
beam;

use, sequence=lhcb1; makethin, sequence=lhcb1, style=teapot, makedipedge=true;

! Cycling w.r.t. to IP3 (mandatory to find closed orbit in collision in the presence of errors)
seqedit, sequence=lhcb1; flatten; cycle, start=IP3; endedit;
use, sequence=lhcb1;

!=> opticsfile.22 is with betastar 30cm at IP1 and IP5
call, file="scripts/optics/opticsfile.22";


!#######################################################################################################
!############################### Setup for orbit and error corrections #################################
!###### Xing scheme should be disabled at start to simplify inclusion of errors/alignments/orbit #######
!#######################################################################################################

on_x1 = 0; on_sep1 = 0; on_o1 = 0;
on_x2 = 0; on_sep2 = 0; on_o2 = 0; on_oe2 =0; on_a2 = 0 ;
on_x5 = 0; on_sep5 = 0; on_o5 = 0;
on_x8 = 0; on_sep8 = 0; on_o8 = 0; on_a8 = 0;  on_sep8h = 0; on_x8v = 0;

on_alice = 0;
on_sol_alice = 0;
on_lhcb = 0;
on_sol_atlas = 0;
on_sol_cms = 0;

NRJ = 6500;
brho := NRJ * 1e9 / clight;
geometric_emit := 3.75e-6 / (NRJ / 0.938); ! This is normalized emittance.

! Set up beam
beam, sequence=lhcb1, bv=1, energy=NRJ, particle=proton, npart=1.0e10, kbunch=1, ex=geometric_emit, ey=geometric_emit;
use, sequence=lhcb1;

! Match Tunes and Chromaticity
match, chrom;
  global, Q1=qx0, Q2=qy0;
  global, DQ1=qprime, DQ2=qprime;
  vary, name=dQx.b1_sq;
  vary, name=dQy.b1_sq;
  vary, name=dQpx.b1_sq;
  vary, name=dQpy.b1_sq;
  LMDIF, calls=100, tolerance=1.0E-21;
endmatch;

use, sequence=lhcb1;

! ============================= !
!  Implement Triplet Tilt Error !
! ============================= !

! Save strength of MQSX IP coupling correctors
KQSX3.R1_old = KQSX3.R1;
KQSX3.L1_old = KQSX3.L1;

! Implement a tilt error for Q1 (right & left of IP1)
tilt_angle = %(TILT_ERROR)s;
select, flag=error, pattern="MQXA.1L1";
EALIGN, DPSI=tilt_angle;  ! for afs / htcondor

select, flag=error, pattern="MQXA.1R1";
EALIGN, DPSI=-1*tilt_angle;  ! for afs / htcondor

! Matching with skewquads correctors to erase coupling at IP1
match, sequence = lhcb1;
  vary, NAME=KQSX3.R1;
  vary, NAME=KQSX3.L1;
  constraint, RANGE="IP1", R11=0;
  constraint, RANGE="IP1", R12=0;
  constraint, RANGE="IP1", R21=0;  ! might not necessarily be needed
  constraint, RANGE="IP1", R22=0;  ! might not necessarily be needed
  LMDIF, CALLS=5000, TOLERANCE=1E-22;
  JACOBIAN, CALLS=1000, TOLERANCE=1E-21;
endmatch;

! Matching with skewquads correctors to erase coupling at IP1
! Second Jacobian call for additional convergence
match, sequence = lhcb1;
  vary, NAME=KQSX3.R1;
  vary, NAME=KQSX3.L1;
  constraint, RANGE="IP1", R11=0;
  constraint, RANGE="IP1", R12=0;
  constraint, RANGE="IP1", R21=0;  ! might not necessarily be needed
  constraint, RANGE="IP1", R22=0;  ! might not necessarily be needed
  JACOBIAN, CALLS=1000, TOLERANCE=1E-21;
endmatch;

! Match Tunes and Chromaticity to compensate the second order contribution of coupling (bump might not be closed)
match, chrom;
  global, Q1=qx0, Q2=qy0;
  global, DQ1=qprime, DQ2=qprime;
  vary, name=dQx.b1_sq;
  vary, name=dQy.b1_sq;
  vary, name=dQpx.b1_sq;
  vary, name=dQpy.b1_sq;
  LMDIF, calls=100, tolerance=1.0E-21;
endmatch;

! Twiss results to output file
select, flag=twiss, clear;
select, flag=twiss, class=monitor, column=name, s, x, y, betx, alfx, mux, bety, alfy, muy, beta11, beta12, beta21, beta22, r11, r12, r21, r22;
select, flag=twiss, pattern="MQXA", column=name, s, x, y, betx, alfx, mux, bety, alfy, muy, beta11, beta12, beta21, beta22, r11, r12, r21, r22;
select, flag=twiss, pattern="IP", column=name, s, x, y, betx, alfx, mux, bety, alfy, muy, beta11, beta12, beta21, beta22, r11, r12, r21, r22;
twiss, file="Outputdata/triplet_tilt_coupling_corr.tfs", ripken=True;  ! for afs / htcondor

! ========================== !
!  Get Closest Tune Approach !
! ========================== !

qfmid = (ptcqyinit + ptcqxinit) / 2.0;
qxmid = qx00 + qfmid;
qymid = qy00 + qfmid;

value, qfmid, qxmid, qymid;

! Save previous values
dQx.b1_init = dQx.b1;
dQy.b1_init = dQy.b1;

! Try to match on the same fractional tune, will fail at Cminus
match;
  global, Q1=62.295, Q2=60.295;
  vary, name=dQx.b1, step=1.0E-7;
  vary, name=dQy.b1, step=1.0E-7;
  LMDIF, calls=100, tolerance=1.0E-21;
endmatch;

! Put back the previous values
dQx.b1 = dQx.b1_init;
dQy.b1 = dQy.b1_init;

! Value of the Cminus
dqminacorr = table(summ, q1) - table(summ, q2) - (qx00 - qy00);
twiss;


! ====================================================== !
!  Save sequence to external file for use in sixtracklib !
! ====================================================== !

save, sequence=lhcb1, beam=true, file="Outputdata/lhc_triplet_tilt_track.seq";


! ============================================= !
!  Output Interesting Values for Python Scripts !
! ============================================= !

value, tilt_angle;
value, KQSX3.R1;  ! skewquad corrector powering
value, KQSX3.L1;  ! skewquad corrector powering
value, dqminacorr;  ! resulting cminus after correction

system, "unlink scripts";
