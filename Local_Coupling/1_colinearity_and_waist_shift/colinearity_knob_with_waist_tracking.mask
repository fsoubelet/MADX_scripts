option, -echo, -warn;
!system, "ln -nfs ~/cernbox/OMC/MADX_scripts/Local_Coupling scripts";  ! for local
system, "ln -nfs /afs/cern.ch/work/f/fesoubel/MADX_scripts/Local_Coupling scripts";  ! for afs / htcondor

!#############################################################################
!############################## Tune and chroma ##############################
!#############################################################################

! Tune definitions used in some of the later macros
qx0 = 62.31;
qy0 = 60.32;
tsplit = 2.0;
qx00 = 62.0;
qy00 = 60.0;
qprime = 2.0;

qxinit = qx0;
qyinit = qy0;
qxfinal = 62.31; ! Define initial qxinit / qyinit with larger separation for robustness to large coupling errors as sources are introduced (want to avoid getting stuck on the wrong side of qx=qy)
qyfinal = 60.32; ! Then rematch to desired final tunes at the very end of the script. qx0 etc are kept with the init values for coupling routines etc.

ptcqxinit = qxinit - qx00;
ptcqyinit = qyinit - qy00;
qxinitint = qxinit - ptcqxinit;
qyinitint = qyinit - ptcqyinit;

dqxinit = qprime;
dqyinit = qprime;
dqxfinal = qprime;
dqyfinal = qprime;


!#############################################################################
!############################# Setting Up Lattice ############################
!#############################################################################

call, file="scripts/lhc_as-built.seq";
slicefactor = 8;
beam;

call, file="scripts/myslice.madx";
beam;

use, sequence=lhcb1; makethin, sequence=lhcb1, style=teapot, makedipedge=true;

! Cycling w.r.t. to IP3 (mandatory to find closed orbit in collision in the presence of errors)
seqedit, sequence=lhcb1; flatten; cycle, start=IP3; endedit;
use, sequence=lhcb1;

!=> opticsfile.22 is with betastar 30cm at IP1 and IP5
call, file="scripts/opticsfile.22";


!#######################################################################################################
!############################### Setup for orbit and error corrections #################################
!###### Xing scheme should be disabled at start to simplify inclusion of errors/alignments/orbit #######
!#######################################################################################################

on_x1 = 0; on_sep1 = 0; on_o1 = 0;
on_x2 = 0; on_sep2 = 0; on_o2 = 0; on_oe2 =0; on_a2 = 0 ;
on_x5 = 0; on_sep5 = 0; on_o5 = 0;
on_x8 = 0; on_sep8 = 0; on_o8 = 0; on_a8 = 0;  on_sep8h = 0; on_x8v = 0;

on_alice = 0;
on_sol_alice = 0;
on_lhcb = 0;
on_sol_atlas = 0;
on_sol_cms = 0;

NRJ = 6500;
brho := NRJ * 1e9 / clight;
normemit := 3.75e-6 / (NRJ / 0.938); ! This is normalized emittance.

! Set up beam
beam, sequence=lhcb1, bv=1, energy=NRJ, particle=proton, npart=1.0e10, kbunch=1, ex=normemit, ey=normemit;
use, sequence=lhcb1;

! Match Tunes and Chromaticity
match, chrom;
  global, Q1=qx0, Q2=qy0;
  global, DQ1=qprime, DQ2=qprime;
  vary, name=dQx.b1_sq;
  vary, name=dQy.b1_sq;
  vary, name=dQpx.b1_sq;
  vary, name=dQpy.b1_sq;
  LMDIF, calls=100, tolerance=1.0E-21;
endmatch;

use, sequence=lhcb1;

! ============================ !
!  Implement Colinearity Knob  !
! ============================ !

! Save strength of MQSX IP coupling correctors
KQSX3.R1_old = KQSX3.R1;
KQSX3.L1_old = KQSX3.L1;

! Power MQSX for coupling bump
colinearity_knob = %(COLIN_KNOB)s;  ! In units of the colin knob (positive integers only)
KQSX3.R1 = colinearity_knob * 1E-4;
KQSX3.L1 = - colinearity_knob * 1E-4;

! ===================================== !
!  Implement Rigidity Waist Shift Knob  !
! ===================================== !

! Save current value of triplets powering
kqx.l1_old = kqx.l1;
kqx.r1_old = kqx.r1;

! Change Triplets powering for waist shift
rigidity_waist_shift_knob = %(RIGIDITY_WAIST_SHIFT_KNOB)s;  ! In units of the rigidity waist shift knob (positive integers only)
kqx.l1 = (1 + rigidity_waist_shift_knob *.005) * kqx.l1_old;
kqx.r1 = (1 - rigidity_waist_shift_knob *.005) * kqx.r1_old;


! Match Tunes and Chromaticity to compensate the second order contribution of coupling
match, chrom;
  global, Q1=qx0, Q2=qy0;
  global, DQ1=qprime, DQ2=qprime;
  vary, name=dQx.b1_sq;
  vary, name=dQy.b1_sq;
  vary, name=dQpx.b1_sq;
  vary, name=dQpy.b1_sq;
  LMDIF, calls=100, tolerance=1.0E-21;
endmatch;

! Twiss results to output file
select, flag=twiss, clear;
select, flag=twiss, pattern="IP", column=name, s, beta11, beta12, beta21, beta22, r11, r12, r21, r22;
twiss, file="Outputdata/colin_waist_dqmin.tfs", ripken=True;

! ========================== !
!  Get Closest Tune Approach !
! ========================== !

qfmid = (ptcqyinit + ptcqxinit) / 2.0;
qxmid = qx00 + qfmid;
qymid = qy00 + qfmid;

value, qfmid, qxmid, qymid;

! Save previous values
dQx.b1_init=dQx.b1;
dQy.b1_init=dQy.b1;

! Try to match on the same fractional tune, will fail at Cminus
match;
  global, q1=62.295, q2=60.295;
  vary,   name=dQx.b1, step=1.0E-7 ;
  vary,   name=dQy.b1, step=1.0E-7 ;
  LMDIF,  calls=100, tolerance=1.0E-21;
endmatch;

! Put back the previous values
dQx.b1=dQx.b1_init;
dQy.b1=dQy.b1_init;

! Value of the Cminus
dqminacorr = table(summ, q1) - table(summ, q2) - (qx00 - qy00);
twiss;

! ============================================= !
!  Go to PTC for particle distribution tracking !
! ============================================= !
ptc_create_universe;
ptc_create_layout, model=3, method=4, nst=3;
PTC_ALIGN;
SELECT, flag=ptc_twiss, pattern="IP", column=name, s, x, y, betx, alfx, mux, bety, alfy, muy, beta11, beta12, beta21, beta22, r11, r12, r21, r22;
ptc_twiss, closed_orbit=true, no=6, icase=5, file="Outputdata/ptc_twiss.tfs";

! Initiate 1000 particles
n = 1;
while (n<=1000) {
  ! Creating particle distribution relatively to 5 sigma
  Nsigmax = tgauss(5);
  Nsigmay = tgauss(5);
  Nsigmapx = tgauss(5);
  Nsigmapy = tgauss(5);
  phasex = RANF()*2*PI;
  phasey = RANF()*2*PI;

  ! Insert beta values at start of tracking, here IP1
  betxip1 = 0.3;
  betyip1 = 0.3;

  ! Initialise phase space coordinates
  myx = sqrt(betxip1) * Nsigmax*sqrt(normemit);
  myy = sqrt(betyip1) * Nsigmay*sqrt(normemit);
  mypx = Nsigmapx * sqrt(normemit) / sqrt(betxip1);
  mypy = Nsigmapy * sqrt(normemit) / sqrt(betyip1);

  ptc_start, x=myx, px=mypx, y=myy, py=mypy;
  n = n + 1;
};

! Perform tracking and observe at IP1
ptc_observe, place=ip1;
ptc_track, icase=5, closed_orbit, dump, turns=10, norm_no=5, element_by_element;
ptc_track_end;
ptc_end;

! ============================================= !
!  Output Interesting Values for Python Scripts !
! ============================================= !

value, colinearity_knob;
value, rigidity_waist_shift_knob;
value, dqminacorr;

system, "for file in track.obs0002.*; do mv -f $file Outputdata/; done";  ! obs0001 is start of machine so IP3 here, obs002 is IP1, only those go to htcondor's kept outputs
system, "unlink scripts";
